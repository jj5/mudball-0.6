<?php

class MudDalTraitsGeneratorStandard extends MudDalGeneratorBase {

  protected $allow_create;
  protected $allow_update;
  protected $allow_delete;
  protected $no_getters;

  public function __construct(
    $host,
    $allow_create = true,
    $allow_update = true,
    $allow_delete = true,
    $no_getters = false
  ) {

    parent::__construct( $host );

    $this->allow_create = $allow_create;
    $this->allow_update = $allow_update;
    $this->allow_delete = $allow_delete;
    $this->no_getters = $no_getters;

  }

  public function print_traits( $table, &$traits_list ) {

    $name = $table->get_name();

    $traits_name = 'MudDal_' . $name;

    $traits_list[] = $traits_name;

?>
trait <?= $traits_name ?> {

<?php

    if ( ! $this->no_getters ) {

      $this->print_traits_standard_get( $table );

      $this->print_traits_standard_get_by( $table );

      $this->print_traits_standard_getters( $table );

    }

    if ( $this->allow_create ) {

      $this->print_traits_standard_add( $table );

    }

    if ( $this->allow_update ) {

      $this->print_traits_standard_set( $table );

      $this->print_traits_standard_put( $table );

    }

    if ( $this->allow_delete ) {

      $this->print_traits_standard_del( $table );

    }

?>
}
<?php

  }

  function print_traits_standard_get( $table ) {

    $tab_name = $table->get_name();
    $tab_const = $table->get_const();
    $function_name = "get_row_$tab_name";
    //$connection_type = $table->get_connection_type();
    $arg_list = [];

    foreach ( $table->col_map as $col ) {

      if ( ! $col->is_key() ) { continue; }

      $arg_type = $col->get_db_datatype();
      $arg_name = $col->get_prop();

      $arg = "{$arg_type} \${$arg_name}";

      $arg_list[] = $arg;

    }

    $args = implode( ', ', $arg_list );

    // 2022-02-20 jj5 - NEW:
    $get_function = "get_row";
    // 2022-02-20 jj5 - OLD:
    //$get_function = "get_row_$connection_type";

    $query = '[]';

?>

  public function <?= $function_name ?>( <?= $args ?> ) {

    // generated by <?= $this->get_generated_by( __FILE__, __LINE__ ) ?>

    return $this-><?= $get_function ?>(
      <?= $tab_const ?>,
      [
<?php

      foreach ( $table->col_map as $col ) :

      if ( ! $col->is_key() ) { continue; }

        $col_const = strtoupper( $col->get_name() );
        $arg_name = '$' . $col->get_prop();
?>
        <?= $col_const ?> => <?= $arg_name ?>,
<?php

      endforeach;

?>
      ]
    );

  }
<?php
  }

  function print_traits_standard_get_by( $table ) {

    $key = $table->get_key();

    $dal_function = "get_row";

    if ( $table->is_cacheable() ) {

      $dal_function .= '_cached';

    }

    foreach ( $table->idx_map as $idx_name => $idx ) :

      $col_list = [];
      $col_prop_list = [];

      foreach ( $idx->col_map as $col ) {

        $col_list[] = $col;
        $col_prop_list[] = $col->get_prop();

      }

      foreach ( $table->col_map as $col_name => $col ) :

        if ( $col->is_vrt() ) { continue; }

        if ( in_array( $col, $col_list ) ) { continue; }

        if ( count( $col_prop_list ) === 0 ) { continue; }

        $arg_list = [];
        $arr_list = [];

        foreach ( $idx->col_map as $idx_col ) {

          $arg_list[] = $idx_col->get_db_datatype() . ' $' . $idx_col->get_prop();

          $arr_list[] = strtoupper( $idx_col->get_name() ) . ' => $' . $idx_col->get_prop();

        }

        $tab_const = strtoupper( $table->get_name() );
        $col_const = strtoupper( $col->get_name() );
        $key_const = strtoupper( $key->get_name() );

        $function_name = 'get_row_' . $table->get_name() . '_by_' . ( implode( '_and_', $col_prop_list ) );

        $args = implode( ', ', $arg_list );

      endforeach;

?>

  public function <?= $function_name ?>( <?= $args ?> ) {

    // generated by <?= $this->get_generated_by( __FILE__, __LINE__ ) ?>

    return $this-><?= $dal_function ?>(
      <?= $tab_const ?>,
      [ <?= implode( ', ', $arr_list ) ?> ]
    );

  }
<?php

    endforeach;

  }

  function print_traits_standard_getters( $table ) {

    $key = null;

    $dal_function = "get_field";

    if ( $table->is_cacheable() ) {

      $dal_function .= '_cached';

    }

    //$dal_function .= '_' . $table->get_connection_type();

    foreach ( $table->col_map as $col_name => $col ) :

      if ( $key === null ) { $key = $col; continue; }

      if ( $col->is_vrt() ) { continue; }

      $db_type = $key->get_db_datatype();
      $arg = $key->get_prop();
      $tab_const = strtoupper( $table->get_name() );
      $col_const = strtoupper( $col->get_name() );
      $key_const = strtoupper( $key->get_name() );

?>

  public function get_<?= $col->get_name() ?>( <?= $db_type ?> $<?= $arg ?> ) {

    // generated by <?= $this->get_generated_by( __FILE__, __LINE__ ) ?>

    return $this-><?= $dal_function ?>(
      <?= $tab_const ?>,
      <?= $col_const ?>,
      [ <?= $key_const ?> => $<?= $arg ?> ]
    );

  }
<?php

    endforeach;

    foreach ( $table->idx_map as $idx_name => $idx ) :

      $col_list = [];
      $col_prop_list = [];

      foreach ( $idx->col_map as $col ) {

        $col_list[] = $col;
        $col_prop_list[] = $col->get_prop();

      }

      foreach ( $table->col_map as $col_name => $col ) :

        if ( $col->is_vrt() ) { continue; }

        if ( in_array( $col, $col_list ) ) { continue; }

        if ( count( $col_prop_list ) === 0 ) { continue; }

        $arg_list = [];
        $arr_list = [];

        foreach ( $idx->col_map as $idx_col ) {

          /*
          $arg_list[] = [
            'type' => $idx_col->get_db_datatype(),
            'name' => $idx_col->get_prop(),
          ];
          */

          $arg_list[] = $idx_col->get_db_datatype() . ' $' . $idx_col->get_prop();

          $arr_list[] = strtoupper( $idx_col->get_name() ) . ' => $' . $idx_col->get_prop();

        }

        $tab_const = strtoupper( $table->get_name() );
        $col_const = strtoupper( $col->get_name() );
        $key_const = strtoupper( $key->get_name() );

        $function_name = 'get_' . $col->get_name() . '_by_' . ( implode( '_and_', $col_prop_list ) );

        $args = implode( ', ', $arg_list );

?>

  public function <?= $function_name ?>( <?= $args ?> ) {

    // generated by <?= $this->get_generated_by( __FILE__, __LINE__ ) ?>

    return $this-><?= $dal_function ?>(
      <?= $tab_const ?>,
      <?= $col_const ?>,
      [ <?= implode( ', ', $arr_list ) ?> ]
    );

  }
<?php

      endforeach;

    endforeach;

  }

  function print_traits_standard_add( $table ) {

    $function_name = "add_row_{$table->get_name()}";
    $arg_list = [];

    foreach ( $table->col_map as $col ) {

      if ( ! $col->is_for_add() ) { continue; }

      $is_nullable = $col->get_nullable();
      $arg_type = $col->get_db_datatype();

      if ( $is_nullable || $col->is_interaction_id() ) {

        $arg_type = "?$arg_type";

      }

      $arg_name = $col->get_prop();

      $arg = "{$arg_type} \${$arg_name}";

      $default = $col->get_default();

      if ( $col->is_interaction_id() ) {

        // 2022-11-10 jj5 - OLD: we don't automatically null this because parameters further
        // along might be required...
        //
        //$arg .= ' = null';

      }
      elseif ( $default === null && ! $is_nullable ) {

        // 2021-03-30 jj5 - in this case there is no default value

      }
      elseif ( $default === MUD_UNSPECIFIED ) {

        if ( $is_nullable ) {

          $arg .= ' = null';

        }
      }
      elseif ( $default === MUD_CURRENT_TIMESTAMP ) {

        // 2021-03-30 jj5 - THINK: do we ignore this? I think it's handled by the database.

      }
      else {

        $arg .= ' = ' . mud_json_compact( $default );

      }

      $arg_list[] = $arg;

    }

    $args = implode( ', ', $arg_list );

?>
  public function <?= $function_name ?>( <?= $args ?> ) {

    // generated by <?= $this->get_generated_by( __FILE__, __LINE__ ) ?>

<?php

      foreach ( $table->col_map as $col ) :

        if ( ! $col->is_interaction_id() ) { continue; }

        $interaction_prop = '$' . $col->get_prop();

?>
    if ( ! <?= $interaction_prop ?> ) { <?= $interaction_prop ?> = $this->get_interaction_id(); }

<?php

      endforeach;

      foreach ( $table->col_map as $col ) :

        if ( ! $col->is_for_add() ) { continue; }

        $validation_function = 'validate_' . $col->get_name();

?>
    $this-><?= $validation_function ?>( $<?= $col->get_prop() ?> );
<?php

      endforeach;

?>

    $row = [
<?php

      $tab_const = strtoupper( $table->get_name() );
      $is_auto_inc = false;
      //$connection_type = $table->get_connection_type();

      foreach ( $table->col_map as $col ) :

        if ( ! $col->is_for_add() ) {

          if ( $col->is_auto_inc() ) { $is_auto_inc = true; }

          continue;

        }

        $col_const = strtoupper( $col->get_name() );
        $arg_name = '$' . $col->get_prop();
?>
      <?= $col_const ?> => <?= $arg_name ?>,
<?php

      endforeach;

      // 2022-02-20 jj5 - NEW:
      $insert_function = ( $is_auto_inc ? 'insert_id' : 'insert' );
      // 2022-02-20 jj5 - OLD:
      //$insert_function = ( $is_auto_inc ? 'insert_id_' : 'insert_' ) . $connection_type;

?>
    ];

    return $this-><?= $insert_function ?>( <?= $tab_const ?>, $row );

  }
<?php
  }

  function print_traits_standard_set( $table ) {

    $function_name = "set_row_{$table->get_name()}";
    $arg_list = [];

    foreach ( $table->col_map as $col ) {

      if ( ! $col->is_for_set() ) { continue; }

      $is_nullable = $col->get_nullable();
      $arg_type = $col->get_db_datatype();

      if ( $is_nullable ) {

        $arg_type = "?$arg_type";

      }

      $arg_name = $col->get_prop();

      $arg = "{$arg_type} \${$arg_name}";

      $default = $col->get_default();

      if ( $default === null && ! $is_nullable ) {

        // 2021-03-30 jj5 - in this case there is no default value

      }
      elseif ( $default === MUD_UNSPECIFIED ) {

        if ( $is_nullable ) {

          $arg .= ' = null';

        }
      }
      elseif ( $default === MUD_CURRENT_TIMESTAMP ) {

        // 2021-03-30 jj5 - THINK: do we ignore this? I think it's handled by the database.

      }
      else {

        $arg .= ' = ' . mud_json_compact( $default );

      }

      $arg_list[] = $arg;

    }

    $args = implode( ', ', $arg_list );

?>

  public function <?= $function_name ?>( <?= $args ?> ) {

    // generated by <?= $this->get_generated_by( __FILE__, __LINE__ ) ?>

<?php

      foreach ( $table->col_map as $col ) :

        if ( ! $col->is_for_set() ) { continue; }

        $validation_function = 'validate_' . $col->get_name();

?>
    $this-><?= $validation_function ?>( $<?= $col->get_prop() ?> );
<?php

      endforeach;
?>

    $row = [
<?php

      $tab_const = strtoupper( $table->get_name() );

      foreach ( $table->col_map as $col ) :

        if ( ! $col->is_for_set() ) { continue; }

        //$connection_type = $table->get_connection_type();
        $col_const = strtoupper( $col->get_name() );
        $arg_name = '$' . $col->get_prop();
?>
      <?= $col_const ?> => <?= $arg_name ?>,
<?php

      endforeach;

      // 2022-02-20 jj5 - NEW:
      $insert_function = "upsert";
      // 2022-02-20 jj5 - OLD:
      //$insert_function = "upsert_$connection_type";

?>
    ];

    return $this-><?= $insert_function ?>( <?= $tab_const ?>, $row );

  }
<?php
  }

  function print_traits_standard_put_old( $table ) {

    $function_name = "put_row_{$table->get_name()}";
    $arg_list = [];

    foreach ( $table->col_map as $col ) {

      if ( ! $col->is_for_put() ) { continue; }

      $arg_type = $col->get_db_datatype();

      $arg_name = $col->get_prop();

      if ( $col->is_key() ) {

        $arg = "{$arg_type} \${$arg_name}";

      }
      else {

        $arg = "?{$arg_type} \${$arg_name} = null";

      }

      $arg_list[] = $arg;

    }

    $args = implode( ', ', $arg_list );

?>

  public function <?= $function_name ?>( <?= $args ?> ) {

    // generated by <?= $this->get_generated_by( __FILE__, __LINE__ ) ?>

<?php

      foreach ( $table->col_map as $col ) :

        if ( ! $col->is_for_put() ) { continue; }

        $validation_function = 'validate_' . $col->get_name();
        $ignore_null = $col->is_key() ? 'false' : 'true';

?>
    $this-><?= $validation_function ?>( $<?= $col->get_prop() ?>, <?= $ignore_null ?> );
<?php

      endforeach;
?>

    $row = [];

<?php

      $tab_const = strtoupper( $table->get_name() );

      foreach ( $table->col_map as $col ) :

        if ( ! $col->is_for_put() ) { continue; }

        //$connection_type = $table->get_connection_type();
        $col_const = strtoupper( $col->get_name() );
        $arg_name = '$' . $col->get_prop();

        if ( $col->is_key() ) :

?>
    $row[ <?= $col_const ?> ] = <?= $arg_name ?>;

<?php

        else :

?>
    if ( <?= $arg_name ?> !== null ) { $row[ <?= $col_const ?> ] = <?= $arg_name ?>; }

<?php

        endif;

      endforeach;

      // 2022-02-25 jj5 - NEW:
      $insert_function = "update";
      // 2022-02-20 jj5 - OLD:
      //$insert_function = "upsert";
      // 2022-02-20 jj5 - OLD:
      //$insert_function = "upsert_$connection_type";

?>
    return $this-><?= $insert_function ?>( <?= $tab_const ?>, $row );

  }
<?php
  }


  function print_traits_standard_put( $table ) {

    $function_name = "put_row_{$table->get_name()}";

?>

  public function <?= $function_name ?>( array $row ) {

    // generated by <?= $this->get_generated_by( __FILE__, __LINE__ ) ?>

<?php

      foreach ( $table->col_map as $col ) :

        if ( ! $col->is_key() ) { continue; }

        $col_const = strtoupper( $col->get_name() );
        $validation_function = 'validate_' . $col->get_name();

?>
    $this-><?= $validation_function ?>( $row[ <?= $col_const ?> ] );

<?php

      endforeach;

      $tab_const = strtoupper( $table->get_name() );

      foreach ( $table->col_map as $col ) :

        if ( ! $col->is_for_put() ) { continue; }

        if ( $col->is_key() ) { continue; }

        //$connection_type = $table->get_connection_type();
        $col_const = strtoupper( $col->get_name() );
        $arg_name = '$' . $col->get_prop();
        $validation_function = 'validate_' . $col->get_name();

?>
    if ( array_key_exists( <?= $col_const ?>, $row ) ) {

      $this-><?= $validation_function ?>( $row[ <?= $col_const ?> ] );

    }

<?php

      endforeach;

      // 2022-02-25 jj5 - NEW:
      $insert_function = "update";
      // 2022-02-20 jj5 - OLD:
      //$insert_function = "upsert";
      // 2022-02-20 jj5 - OLD:
      //$insert_function = "upsert_$connection_type";

?>
    return $this-><?= $insert_function ?>( <?= $tab_const ?>, $row );

  }
<?php
  }

  function print_traits_standard_del( $table ) {

    //$connection_type = $table->get_connection_type();
    $function_name = "del_row_{$table->get_name()}";
    $arg_list = [];

    foreach ( $table->col_map as $col ) {

      if ( ! $col->is_key() ) { continue; }

      $arg_type = $col->get_db_datatype();

      $arg_name = $col->get_prop();

      if ( $col->is_key() ) {

        $arg = "{$arg_type} \${$arg_name}";

      }
      else {

        $arg = "?{$arg_type} \${$arg_name} = null";

      }

      $arg_list[] = $arg;

    }

    $args = implode( ', ', $arg_list );

?>

  public function <?= $function_name ?>( <?= $args ?> ) {

    // generated by <?= $this->get_generated_by( __FILE__, __LINE__ ) ?>

<?php

      foreach ( $table->col_map as $col ) :

        if ( ! $col->is_key() ) { continue; }

        $validation_function = 'validate_' . $col->get_name();

?>
    $this-><?= $validation_function ?>( $<?= $col->get_prop() ?> );
<?php

      endforeach;
?>

    $spec = [
<?php

      $tab_const = strtoupper( $table->get_name() );

      foreach ( $table->col_map as $col ) :

        if ( ! $col->is_key() ) { continue; }

        //$connection_type = $table->get_connection_type();
        $col_const = strtoupper( $col->get_name() );
        $arg_name = '$' . $col->get_prop();
?>
      <?= $col_const ?> => <?= $arg_name ?>,
<?php

      endforeach;

      // 2022-02-20 jj5 - NEW:
      $insert_function = "upsert";
      // 2022-02-20 jj5 - OLD:
      //$insert_function = "upsert_$connection_type";

?>
    ];

<?php

      // 2022-02-20 jj5 - NEW:
      $delete_function = "delete";
      // 2022-02-20 jj5 - OLD:
      //$delete_function = "delete_$connection_type";

?>
    return $this-><?= $delete_function ?>( <?= $tab_const ?>, $spec );

  }
<?php
  }
}
